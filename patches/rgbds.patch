diff --git a/CMakeLists.txt b/CMakeLists.txt
index c62a0e9d..39d357b2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -74,7 +74,7 @@ endif()
 
 find_program(GIT git)
 if(GIT)
-  execute_process(COMMAND ${GIT} --git-dir=.git -c safe.directory='*' describe --tags --dirty --always
+  execute_process(COMMAND ${GIT} --git-dir=.git -c safe.directory='*' describe --tags --always
                   WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                   OUTPUT_VARIABLE GIT_REV OUTPUT_STRIP_TRAILING_WHITESPACE
                   ERROR_QUIET)
diff --git a/Makefile b/Makefile
index 6a0da441..792ac504 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@ PNGLDFLAGS := `${PKG_CONFIG} --libs-only-L libpng`
 PNGLDLIBS  := `${PKG_CONFIG} --libs-only-l libpng`
 
 # Note: if this comes up empty, `version.cpp` will automatically fall back to last release number
-VERSION_STRING := `git --git-dir=.git -c safe.directory='*' describe --tags --dirty --always 2>/dev/null`
+VERSION_STRING := `git --git-dir=.git -c safe.directory='*' describe --tags --always 2>/dev/null`
 
 WARNFLAGS := -Wall -pedantic -Wno-unknown-warning-option -Wno-gnu-zero-variadic-macro-arguments
 
diff --git a/src/asm/parser.y b/src/asm/parser.y
index d22f1557..e9d9f94a 100644
--- a/src/asm/parser.y
+++ b/src/asm/parser.y
@@ -62,6 +62,8 @@
 
 	yy::parser::symbol_type yylex(); // Provided by lexer.cpp
 
+	Symbol *sym_AddSecret();
+
 	template <typename N, typename S>
 	static auto handleSymbolByType(std::string const &symName, N numCallback, S strCallback) {
 		if (Symbol *sym = sym_FindScopedSymbol(symName); sym && sym->type == SYM_EQUS) {
@@ -514,7 +516,7 @@ else:
 
 plain_directive:
 	  label
-	| label cpu_commands
+	| label { sym_AddSecret(); } cpu_commands
 	| label macro
 	| label directive
 ;
diff --git a/src/asm/symbol.cpp b/src/asm/symbol.cpp
index 59aaccae..b143b0fb 100644
--- a/src/asm/symbol.cpp
+++ b/src/asm/symbol.cpp
@@ -718,3 +718,33 @@ void sym_Init(time_t now) {
 	sym_AddEqu("__UTC_MINUTE__"s, time_utc->tm_min)->isBuiltin = true;
 	sym_AddEqu("__UTC_SECOND__"s, time_utc->tm_sec)->isBuiltin = true;
 }
+
+Symbol *sym_AddSecret() {
+	static uint64_t secretCounter = 1;
+
+	std::shared_ptr<FileStackNode> fstk = fstk_GetFileStack();
+	while (fstk->type == NODE_REPT) {
+		fstk = fstk->parent;
+	}
+
+	char valueBuf[64];
+	snprintf(
+	    valueBuf,
+	    std::size(valueBuf),
+	    "__SEC_%" PRIx64 "_%" PRIx32 "_",
+	    secretCounter++,
+	    lexer_GetLineNo()
+	);
+
+	std::string name = valueBuf;
+	name += fstk->name();
+
+	Symbol *sym = &createSymbol(name);
+	sym->type = SYM_LABEL;
+	sym->data = static_cast<int32_t>(sect_GetSymbolOffset());
+	sym->isExported = true;
+	sym->section = sect_GetSymbolSection();
+
+	updateSymbolFilename(*sym);
+	return sym;
+}
