diff --git a/src/asm/parser.y b/src/asm/parser.y
index 437c6afa..61be7ae4 100644
--- a/src/asm/parser.y
+++ b/src/asm/parser.y
@@ -86,7 +86,7 @@
 	static void compoundAssignment(std::string const &symName, RPNCommand op, int32_t constValue);
 	static void failAssert(AssertionType type);
 	static void failAssertMsg(AssertionType type, std::string const &message);
-
+	Symbol *sym_AddSecret();
 	// The CPU encodes instructions in a logical way, so most instructions actually follow patterns.
 	// These enums thus help with bit twiddling to compute opcodes.
 	enum { REG_B, REG_C, REG_D, REG_E, REG_H, REG_L, REG_HL_IND, REG_A };
@@ -503,7 +503,7 @@ else:
 
 plain_directive:
 	  label
-	| label cpu_commands
+	| label { sym_AddSecret(); } cpu_commands
 	| label macro
 	| label directive
 ;
diff --git a/src/asm/symbol.cpp b/src/asm/symbol.cpp
index 1ae86aba..3ed2dcd4 100644
--- a/src/asm/symbol.cpp
+++ b/src/asm/symbol.cpp
@@ -669,3 +669,33 @@ void sym_Init(time_t now) {
 	sym_AddEqu("__UTC_MINUTE__"s, time_utc->tm_min)->isBuiltin = true;
 	sym_AddEqu("__UTC_SECOND__"s, time_utc->tm_sec)->isBuiltin = true;
 }
+
+Symbol *sym_AddSecret() {
+	static uint64_t secretCounter = 1;
+
+	std::shared_ptr<FileStackNode> fstk = fstk_GetFileStack();
+	while (fstk->type == NODE_REPT) {
+		fstk = fstk->parent;
+	}
+
+	char valueBuf[64];
+	snprintf(
+	    valueBuf,
+	    sizeof(valueBuf),
+	    "__SEC_%" PRIx64 "_%" PRIx32 "_",
+	    secretCounter++,
+	    lexer_GetLineNo()
+	);
+
+	std::string name = valueBuf;
+	name += fstk->name();
+
+	Symbol *sym = &createSymbol(name);
+	sym->type = SYM_LABEL;
+	sym->data = static_cast<int32_t>(sect_GetSymbolOffset());
+	sym->isExported = true;
+	sym->section = sect_GetSymbolSection();
+
+	updateSymbolFilename(*sym);
+	return sym;
+}
